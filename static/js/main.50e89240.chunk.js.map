{"version":3,"sources":["components/LogoTitle.js","components/EventItem.js","views/MainView.js","App.js","serviceWorker.js","index.js"],"names":["LogoTitle","react_default","a","createElement","className","data-text","Component","EventItem","this","props","googleEvent","start","dateTime","summary","location","JSON","stringify","MainView","alert","window","href","loading","events","listItems","map","event","key","id","src_components_EventItem","_this","src_components_LogoTitle","react_google_calendar_events_list_min_default","calendarID","apiKey","_ref","displayEvents","reactstrap_es","color","onClick","createEvent","openChat","openDonate","App","src_views_MainView","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAmBeA,0LAdX,OAEEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeC,YAAU,kBAAvC,kBACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BARDE,cCoBTC,0LAlBX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,eAEGI,KAAKC,MAAMC,YAAYC,MAAMC,SAFhC,MAIIJ,KAAKC,MAAMC,YAAYG,QAJ3B,iBAMGL,KAAKC,MAAMC,YAAYI,SAExBb,EAAAC,EAAAC,cAAA,WARF,IAQSF,EAAAC,EAAAC,cAAA,WAENY,KAAKC,UAAUR,KAAKC,MAAMC,qBAbXJ,sCCwGTW,+LAjGXC,MAAM,sDAKNC,OAAOL,SAASM,KAAO,mEAKvBF,MAAM,yDAGMG,EAASC,GACrB,GAAID,EACF,OACIpB,EAAAC,EAAAC,cAAA,sBAIJ,IAAMoB,EAAYD,EAAOE,IAAI,SAACC,GAAD,OAC3BxB,EAAAC,EAAAC,cAAA,MAAIuB,IAAKD,EAAME,IACb1B,EAAAC,EAAAC,cAACyB,EAAD,CACElB,YAAae,OAKnB,OACExB,EAAAC,EAAAC,cAAA,UAAKoB,oCAKF,IAAAM,EAAArB,KACP,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,CACE8B,WAAW,uDACXC,OAAO,2CAEN,SAAAC,GAAA,IAAEb,EAAFa,EAAEb,QAASC,EAAXY,EAAWZ,OAAX,OACCO,EAAKM,cAAcd,EAASC,MAIlCrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,0hBAIAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS9B,KAAK+B,aAFhB,2FAQJtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,8dAGAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS9B,KAAKgC,UAFhB,iCAQJvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,gwBAIAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS9B,KAAKiC,YAFhB,0GArFSnC,cCORoC,0LARX,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAACwC,EAAD,cAJUrC,cCQEsC,QACW,cAA7BzB,OAAOL,SAAS+B,UAEe,UAA7B1B,OAAOL,SAAS+B,UAEhB1B,OAAOL,SAAS+B,SAASC,MACvB,iECXNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.50e89240.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './LogoTitle.css';\n\nclass LogoTitle extends Component {\n  render() {\n    return (\n      // https://codepen.io/anon/pen/EQPRew\n      <header className=\"header\">\n        <div className=\"header__text-effect\">\n          <h2 className=\"header__neon\" data-text=\"events4friends\">events4friends</h2>\n          <div className=\"header__gradient\"></div>\n          <div className=\"header__spotlight\"></div>\n        </div>      \n      </header>\n    )\n  }\n}\n\n\nexport default LogoTitle;\n","import React, { Component } from 'react';\nimport './EventItem.css';\n\nclass EventItem extends Component {\n  render() {\n    return (      \n      <div className=\"event-item\">\n        üìÖ    \n        {this.props.googleEvent.start.dateTime} \n        -\n        \"{this.props.googleEvent.summary}\"\n        üìç\n        {this.props.googleEvent.location}\n        \n        <br /> <hr />\n\n        {JSON.stringify(this.props.googleEvent)}\n      </div>      \n    )\n  }\n}\n\n\nexport default EventItem;\n","import React, { Component } from 'react';\nimport LogoTitle from '../components/LogoTitle.js'\nimport EventItem from '../components/EventItem.js'\nimport { Button } from 'reactstrap';\nimport Calendar from 'react-google-calendar-events-list';\nimport './MainView.css';\n\nclass MainView extends Component {\n  createEvent() {\n    // TODO: put yandex goals here\n    alert('Not implemented');\n  }\n\n  openChat() {    \n    // TODO: put yandex goals here\n    window.location.href = 'https://t.me/events4friends';\n  }\n\n  openDonate() {\n    // TODO: put yandex goals here\n    alert('Not implemented');\n  }\n\n  displayEvents(loading, events) {\n    if (loading) {\n      return (\n          <div>loading</div>\n        );\n    } else {\n\n      const listItems = events.map((event) =>\n        <li key={event.id}>\n          <EventItem \n            googleEvent={event}\n          />\n        </li>\n      );\n\n      return (\n        <ul>{listItems}</ul>\n      );      \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"main-view\">\n        <LogoTitle />\n        <div className=\"container container-center main-view-container\">\n          <div className=\"pt-5\">            \n            <Calendar\n              calendarID=\"dveenjcu4k5ktd3k8pv4iul2bk@group.calendar.google.com\"\n              apiKey=\"AIzaSyBOXnnT1F-h9s1FP3063BQ_o0KtD7Y0DPs\"\n            >\n              {({loading, events}) =>\n                this.displayEvents(loading, events)\n              }\n            </Calendar>\n          </div>\n          <div className=\"pt-5\">\n            <p>\n              –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å –¥—Ä—É–∑–µ–π? –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∫–µ—Ç—É –∏ –≤—Å–∫–æ—Ä–µ –≤–∞—à–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è\n              –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ.\n            </p>\n            <p>\n              <Button\n                color=\"warning\" \n                onClick={this.createEvent}\n              >\n                –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n              </Button>\n            </p>\n          </div>          \n          <div className=\"pt-5\">\n            <p>\n              –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –í–∞—Å –≤ —á–∞—Ç, –≥–¥–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n            </p>\n            <p>\n              <Button\n                color=\"warning\" \n                onClick={this.openChat}\n              >\n                Telegram-—á–∞—Ç\n              </Button>\n            </p>\n          </div>\n          <div className=\"py-5\">\n            <p>\n              –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–∂–µ—Ä–≤–æ–≤–∞–Ω–∏—è. –ê—Ä–µ–¥–Ω–∞ –ø–æ–º–µ—â–µ–Ω–∏–π, –±–∏–ª–µ—Ç—ã, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –≤–∫—É—Å–Ω—ã–π —á–∞–π —Å –ø–ª—é—à–∫–∞–º–∏ - –≤—Å–µ —Å—Ç–æ–∏—Ç –¥–µ–Ω–µ–≥.\n              –°—Ö–µ–º–∞ –ø—Ä–æ—Å—Ç–∞—è: –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ - –ª—É—á—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n            </p>\n            <p>\n              <Button \n                color=\"warning\"\n                onClick={this.openDonate}\n              >\n                –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏\n              </Button>\n            </p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default MainView;\n","import React, { Component } from 'react';\nimport MainView from './views/MainView.js'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App App-fixed-image\">\n        <MainView />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}